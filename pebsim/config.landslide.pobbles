################################################################################
# @file config.landslide
# @brief A place to specify names/etc of important functions/etc.
# @author Ben Blum <bblum@andrew.cmu.edu>, and you, the student :)
#
# This is part of a shell script, so write in shell. Available helper functions
# for use in writing this config file:
#
# get_sym        Gets the address of a global symbol in the kernel image.
# get_func       Gets the address of the (first instruction of) a function in
#                the kernel image.
# get_func_end   Gets the address of the LAST instruction in a given function
#                (not including trailing nops) (the instruction is always 'ret')
# ignore_func, ignore_sym - See below.
################################################################################

# The path to your kernel image; the file called "kernel" that gets built.
KERNEL_IMG=kernel-pobbles
# The name of your kernel. Must be only one token; underscores are fine.
# Examples: "pathos" "pathos_broken" but not "pathos-broken"
KERNEL_NAME=pobbles_race

# The function registered in the IDT to handle timer interrupts.
TIMER_WRAPPER=timer_handler_wrapper

# The function that all context switches go through. Preferably the outermost
# one - e.g. if a C function calls an assembly function, and both meet this
# criterion, use the name of the former.
CONTEXT_SWITCH=context_switch

# The name of the function in which threads go to sleep on readline.
READLINE=readline

# This function will be called later to generate the list of functions that
# comprise your kernel's scheduler. Call 'sched_func' once per function.
function sched_funcs {
	sched_func sch_queue_append
	sched_func sch_queue_pop
	sched_func sch_queue_remove
	sched_func sch_queue_search
	sched_func sch_runqueue_add_nolock
	sched_func sch_runqueue_add
	sched_func sch_runqueue_remove
	sched_func sch_runqueue_next
	sched_func context_switch
	sched_func magic_jar
	sched_func timer_handler
}

# Type sizes. Not used by anything outside of this file, so feel free to add or
# remove some as necessary.
INT_SIZE=4
PTR_SIZE=4
MUTEX_SIZE=`echo $(($INT_SIZE+$INT_SIZE))`
RQ_SIZE=`echo $(($PTR_SIZE+$PTR_SIZE+$MUTEX_SIZE))`


# This function will be called later to generate the list of global symbols that
# landslide should ignore shared memory accesses to.
# Call "ignore_sym" once per symbol; arg1 is the symbol name, arg2 is the type's
# size in bytes.
# Note that if you wish to also not have decision points on locking a mutex,
# declare it below in ignore_mutexes instead of here.
function ignore_syms {
	ignore_sym scheduler_locked $INT_SIZE
	ignore_sym thr_current $PTR_SIZE
	ignore_sym timer_count $INT_SIZE
	ignore_sym sleeping $RQ_SIZE
	ignore_sym cas2i_queue $RQ_SIZE
	ignore_sym runqueue $RQ_SIZE
}

# See above.
function ignore_mutexes {
	ignore_sym vm_mutex $MUTEX_SIZE
	ignore_sym malloc_lock $MUTEX_SIZE
	ignore_sym cmutex $MUTEX_SIZE
}

# vim: ft=sh
