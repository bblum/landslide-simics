# Add the 410mods directory to the python path and the simics search path.
@sys.path += [ os.environ["SIMENV"] ]
add-directory (env "SIMENV")

# Add the scripts directory.
@sys.path += [ os.environ["SIMSCRIPTS"] ]

# Add the current directory (from where simics46[-gui] was invoked) to the search path.
add-directory (env "OS_PROJ_PATH")

if not defined create_network {}
if not defined mac_address    {$mac_address   = "10:10:10:10:10:20"}
if not defined disk_size      {$disk_size     = 1056964608}

###

$freq_mhz = 200

@simenv.memory_megs = int(os.environ.get("SIMICS_MEM_SIZE", 256))
@simenv.text_console = os.environ.get("SIMICS_TEXT_CONSOLE", "no")
@simenv.num_cpus = int( os.environ.get("SIMICS_CPU_COUNT", 1) )

@simenv.use_piix4_usb = int( os.environ.get("SIMICS_ENABLE_USB", 0) )

#@try :
#  if os.environ["SIMICS_USE_USB_KEYBOARD"] != "" :
#    simenv.use_piix4_usb = 1;
#except :
#  pass

@try :
  simenv.disk_image = os.environ["SIMICS_DISK_IMAGE"]
except :
  pass

@try :
  simenv.disk_size = os.environ["SIMICS_DISK_SIZE"]
except :
  pass

@try :
  if os.environ["SIMICS_AMD_SIXTYFOUR"] != "" :
    simenv.cpu_class = "x86-hammer"
except :
  pass

$use_vmp = FALSE
run-command-file "%simics%/targets/x86-440bx/x86-440bx-pci-system.include"

# $eth = (create-isa-lance mac_address = $mac_address)
# $sb.connect $eth

instantiate-components

# $eth_comp = $eth
# $eth_cnt = ""
# run-command-file "%simics%/targets/common/add-eth-link.include"

load-module symtable
new-symtable deflsym
if $text_console == "no" {
	system.console.switch-to-graphics-console
	system.console.con.enable-input
}

@if os.environ.get("SIMICS_REALTIME", "") != "":
	SIM_run_command("enable-real-time-mode")

# ???

@if os.environ.has_key('SIMICS_DISK_IMAGE') and os.environ.has_key('SIMICS_WRITEBACK'):
    conf.system.disk.hd_image.files[0][1] = 'rw'

alias ide0 system.motherboard.southbridge.ide0
alias ide_dma system.motherboard.southbridge.pci_to_ide

# Aliases

alias cpu0 system.motherboard.processor0.core[0][0]
@conf.cpu0 = conf.system.motherboard.processor0.core[0][0]

alias cpu0_tlb system.motherboard.processor0.tlb[0][0]
@conf.cpu0_tlb = conf.system.motherboard.processor0.tlb[0][0]
alias tlb0 system.motherboard.processor0.tlb[0][0]
@conf.tlb0 = conf.system.motherboard.processor0.tlb[0][0]
alias apic0 system.motherboard.processor0.apic[0][0]
@conf.apic0 = conf.system.motherboard.processor0.apic[0][0]

# aliases for cpu1, cpu1_tlb, tlb1, etc.
foreach $cpu in (range 1 $num_cpus) {
	$proc = "system.motherboard.processor" + $cpu
	exec "alias " + "cpu" + $cpu + " " + $proc + ".core[0][0]"
	exec "alias " + "cpu" + $cpu + "_tlb" + " " + $proc + ".tlb[0][0]"
	exec "alias " + "tlb" + $cpu + " " + $proc + ".tlb[0][0]"
	exec "alias " + "apic" + $cpu + " " + $proc + ".apic[0][0]"
}

alias pic0 system.motherboard.southbridge.pic
@conf.pic0 = conf.system.motherboard.southbridge.pic

alias pit0 system.motherboard.southbridge.pit
@conf.pit0 = conf.system.motherboard.southbridge.pit

alias ps2 system.motherboard.sio.kbd
@conf.ps2 = conf.system.motherboard.sio.kbd

run-python-file "410mods.py"

########################
#### bblum was here ####
########################

add-module-directory /afs/andrew.cmu.edu/usr12/bblum/masters/work/linux64/lib

# Get the kernel image name, source path, test case name.
@SIM_source_python("landslide-config.py")

## symbol tables (should be in 410mods.py but isn't)
deflsym.load-symbols kernel
@SIM_set_attribute(SIM_get_object("deflsym"), "sourcepath", ls_source_path)

## adjust bootfd disk set up if necessary

@simenv.ls_pintos = ls_pintos
if $ls_pintos == "yes" {
	flp0.eject-floppy A
	disk0.add-diff-file bootfd.img
	system_cmp0.cmos-boot-dev C
	@print "Pintos boot disk moved to drive C."
}

## setting up landslide

load-module landslide
@landslide = SIM_create_object("landslide", "landslide0", [])
@cmd_file = "/dev/shm/landslide-save-" + str(time.time()) + ".simics"
@SIM_set_attribute(landslide, "cmd_file", cmd_file)
@html_file = "landslide-trace-" + str(time.time()) + ".html"
@SIM_set_attribute(landslide, "html_file", html_file)

@if os.environ["QUICKSAND_CONFIG_TEMP"] != "" :
	SIM_set_attribute(landslide, "quicksand_pps", os.environ["QUICKSAND_CONFIG_TEMP"])
	print "loaded some dynamic pps from quicksand"

if $ls_pintos == "yes" {
	# Bit of a hack. But "start" doesn't work... in pintos, start() is
	# called still in some real mode bizarro world. The "mov $SEL_KDSEG,
	# %ax" instruction in start.S is the first one that can be broken on.
	break (sym main)
} else {
	break (sym _start)
}
run
new-tracer
trace0.start
@SIM_set_attribute(SIM_get_object("trace0"), "consumer", landslide)
continue
@SIM_set_attribute(landslide, "test_case", ls_test_case)

@SIM_source_python("landslide-wrap.py")
