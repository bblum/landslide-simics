diff --git a/pintos/src/Makefile.build b/pintos/src/Makefile.build
index e997d27..c5ecfad 100644
--- a/pintos/src/Makefile.build
+++ b/pintos/src/Makefile.build
@@ -13,6 +13,7 @@ kernel.bin: CPPFLAGS += -I$(SRCDIR)/lib/kernel
 
 # Core kernel.
 threads_SRC  = threads/start.S		# Startup code.
+threads_SRC += threads/tell_landslide.c
 threads_SRC += threads/init.c		# Main program.
 threads_SRC += threads/thread.c		# Thread management core.
 threads_SRC += threads/switch.S		# Thread switch routine.
diff --git a/pintos/src/lib/kernel/list.c b/pintos/src/lib/kernel/list.c
index 316d9ef..6bd41bb 100644
--- a/pintos/src/lib/kernel/list.c
+++ b/pintos/src/lib/kernel/list.c
@@ -34,6 +34,28 @@
 static bool is_sorted (struct list_elem *a, struct list_elem *b,
                        list_less_func *less, void *aux) UNUSED;
 
+/* for landslide annotations */
+#include "threads/thread.h" // for get_rq_addr(), list_entry(struct thread) and thread->tid
+#include "threads/tell_landslide.h"
+#include "threads/interrupt.h"
+static bool is_runqueue(struct list_elem *elem)
+{
+  struct list_elem *e;
+  enum intr_level old_level = intr_disable();
+  for (e = list_begin(get_rq_addr()); e != list_end(get_rq_addr()); e = list_next(e)) {
+    if (e == elem) {
+      intr_set_level(old_level);
+      return true;
+    }
+  }
+  if (e == elem) { /* check for e.g. list_insert(list_end(list), elem) */
+    intr_set_level(old_level);
+    return true;
+  }
+  intr_set_level(old_level);
+  return false;
+}
+
 /* Returns true if ELEM is a head, false otherwise. */
 static inline bool
 is_head (struct list_elem *elem)
@@ -171,6 +193,10 @@
   ASSERT (is_interior (before) || is_tail (before));
   ASSERT (elem != NULL);
 
+  if (is_runqueue(before)) {
+    tell_landslide_thread_on_rq(list_entry(elem, struct thread, elem)->tid);
+  }
+
   elem->prev = before->prev;
   elem->next = before;
   before->prev->next = elem;
@@ -187,6 +213,13 @@
   ASSERT (is_interior (before) || is_tail (before));
   if (first == last)
     return;
+  if (is_runqueue(before) && !is_runqueue(first)) {
+    struct list_elem *e;
+    /* exclude 'last' which is why this is before the list_prev call below  */
+    for (e = first; e != NULL && e != last; e = list_next(first)) {
+      tell_landslide_thread_on_rq(list_entry(e, struct thread, elem)->tid);
+    }
+  } // XXX: Add "else if (!is_runqueue(before) && is_runqueue(first)) ... tl_OFF_rq...". But no kernel seems to need dis.
   last = list_prev (last);
 
   ASSERT (is_interior (first));
@@ -249,6 +282,9 @@
 list_remove (struct list_elem *elem)
 {
   ASSERT (is_interior (elem));
+  if (is_runqueue(elem)) {
+    tell_landslide_thread_off_rq(list_entry(elem, struct thread, elem)->tid);
+  }
   elem->prev->next = elem->next;
   elem->next->prev = elem->prev;
   return elem->next;
diff --git a/pintos/src/tests/threads/priority-sema.c b/pintos/src/tests/threads/priority-sema.c
index 2834a88..5f75e11 100644
--- a/pintos/src/tests/threads/priority-sema.c
+++ b/pintos/src/tests/threads/priority-sema.c
@@ -22,8 +22,8 @@
 
   sema_init (&sema, 0);
-  thread_set_priority (PRI_MIN);
-  for (i = 0; i < 10; i++) 
+  thread_set_priority (PRI_DEFAULT);
+  for (i = 0; i < 2; i++)
     {
-      int priority = PRI_DEFAULT - (i + 3) % 10 - 1;
+      int priority = PRI_DEFAULT ;//- (i + 3) % 10 - 1;
       char name[16];
       snprintf (name, sizeof name, "priority %d", priority);
@@ -31,8 +31,8 @@
     }
 
-  for (i = 0; i < 10; i++) 
+  for (i = 0; i < 2; i++)
     {
       sema_up (&sema);
-      msg ("Back in main thread."); 
+      //msg ("Back in main thread.");
     }
 }
@@ -42,4 +42,4 @@
 {
   sema_down (&sema);
-  msg ("Thread %s woke up.", thread_name ());
+  // msg ("Thread %s woke up.", thread_name ());
 }
diff --git a/pintos/src/threads/init.c b/pintos/src/threads/init.c
index cebec2c..1e94ca0 100644
--- a/pintos/src/threads/init.c
+++ b/pintos/src/threads/init.c
@@ -22,6 +22,7 @@
 #include "threads/palloc.h"
 #include "threads/pte.h"
 #include "threads/thread.h"
+#include "threads/tell_landslide.h"
 #ifdef USERPROG
 #include "userprog/process.h"
 #include "userprog/exception.h"
@@ -129,4 +130,6 @@
 
   printf ("Boot complete.\n");
+
+  tell_landslide_sched_init_done();
   
   /* Run actions specified on kernel command line. */
@@ -135,4 +138,8 @@
   /* Finish up. */
   shutdown ();
+  intr_disable();
+  while (true) {
+	  thread_block();
+  }
   thread_exit ();
 }
diff --git a/pintos/src/threads/tell_landslide.c b/pintos/src/threads/tell_landslide.c
new file mode 100644
index 0000000..ff2bcd7
--- /dev/null
+++ b/pintos/src/threads/tell_landslide.c
@@ -0,0 +1,24 @@
+/**
+ * @file tell_landslide.c
+ * @brief Specification for pebbles kernels to tell landslide about themselves.
+ * @author Ben Blum <bblum@andrew.cmu.edu>
+ */
+
+#include "tell_landslide.h"
+
+void tell_landslide_preempt(void) { }
+void tell_landslide_thread_switch(int new_tid) { }
+void tell_landslide_sched_init_done(void) { }
+void tell_landslide_forking(void) { }
+void tell_landslide_vanishing(void) { }
+void tell_landslide_sleeping(void) { }
+void tell_landslide_thread_on_rq(int tid) { }
+void tell_landslide_thread_off_rq(int tid) { }
+void tell_landslide_mutex_locking(void *mutex_addr) { }
+void tell_landslide_mutex_blocking(int owner_tid) { }
+void tell_landslide_mutex_locking_done(void *mutex_addr) { }
+void tell_landslide_mutex_trylocking(void *mutex_addr) { }
+void tell_landslide_mutex_trylocking_done(void *mutex_addr, int succeeded) { }
+void tell_landslide_mutex_unlocking(void *mutex_addr) { }
+void tell_landslide_mutex_unlocking_done(void) { }
+void tell_landslide_dump_stack(void) { }
diff --git a/pintos/src/threads/tell_landslide.h b/pintos/src/threads/tell_landslide.h
new file mode 100644
index 0000000..705713e
--- /dev/null
+++ b/pintos/src/threads/tell_landslide.h
@@ -0,0 +1,37 @@
+/**
+ * @file tell_landslide.h
+ * @brief Specification for pebbles kernels to tell landslide about themselves.
+ * @author Ben Blum <bblum@andrew.cmu.edu>
+ */
+
+#ifndef __LS_TELL_LANDSLIDE_H
+#define __LS_TELL_LANDSLIDE_H
+
+/* Call this to indicate a "preemption point" in your kernel's execution. */
+void tell_landslide_preempt(void);
+
+void tell_landslide_thread_switch(int new_tid);
+void tell_landslide_sched_init_done(void);
+void tell_landslide_forking(void);
+void tell_landslide_vanishing(void);
+void tell_landslide_sleeping(void);
+void tell_landslide_thread_on_rq(int tid);
+void tell_landslide_thread_off_rq(int tid);
+
+/* You should use this one IF AND ONLY IF you have mutexes that leave blocked
+ * threads on the runqueue (e.g., they yield-to-owner). */
+void tell_landslide_mutex_blocking(int owner_tid);
+
+/* You should use these if you used blocking(), above, or if you wish to turn
+ * on the data race detector (PRINT_DATA_RACES=1). Otherwise not necessary. */
+void tell_landslide_mutex_locking(void *mutex_addr);
+void tell_landslide_mutex_locking_done(void *mutex_addr);
+void tell_landslide_mutex_unlocking(void *mutex_addr);
+void tell_landslide_mutex_unlocking_done(void);
+void tell_landslide_mutex_trylocking(void *mutex_addr);
+void tell_landslide_mutex_trylocking_done(void *mutex_addr, int succeeded); /* 1 true, 0 false */
+
+/* Bonus annotations */
+void tell_landslide_dump_stack(void);
+
+#endif
diff --git a/pintos/src/threads/thread.c b/pintos/src/threads/thread.c
index 87f22b8..fb88495 100644
--- a/pintos/src/threads/thread.c
+++ b/pintos/src/threads/thread.c
@@ -1,6 +1,7 @@
 #include "threads/thread.h"
 #include <debug.h>
 #include <stddef.h>
+#include "threads/tell_landslide.h"
 #include <random.h>
 #include <stdio.h>
 #include <string.h>
@@ -199,6 +201,7 @@
   sf->ebp = 0;
 
   /* Add to run queue. */
+  tell_landslide_forking();
   thread_unblock (t);
 
   return tid;
@@ -556,6 +559,11 @@
   struct thread *next = next_thread_to_run ();
   struct thread *prev = NULL;
 
+  if (cur->status == THREAD_DYING)
+    tell_landslide_vanishing();
+  if (cur != next)
+    tell_landslide_thread_switch(next->tid);
+
   ASSERT (intr_get_level () == INTR_OFF);
   ASSERT (cur->status != THREAD_RUNNING);
   ASSERT (is_thread (next));
